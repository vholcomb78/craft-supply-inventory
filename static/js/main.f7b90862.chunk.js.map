{"version":3,"sources":["components/shared/Search.tsx","components/layout/Header.tsx","components/items/ItemHome.tsx","App.tsx","serviceWorker.js","index.js"],"names":["searchCss","name","styles","searchIconCss","inputCss","Search","jsx","css","SearchIcon","InputBase","placeholder","inputProps","headerCss","Header","pathname","useLocation","AppBar","position","Toolbar","className","Link","to","ItemHome","_useState","useState","_useState2","_slicedToArray","showAdd","setShowAdd","Button","onClick","aria-hidden","paperCss","App","React","createElement","Router","Paper","elevation","Switch","Route","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mXAMA,IAAMA,EAAS,CAAAC,KAAA,UAAAC,OAAA,oHAUTC,EAAa,CAAAF,KAAA,SAAAC,OAAA,uIAWbE,EAAQ,CAAAH,KAAA,SAAAC,OAAA,6CAsBCG,EAfA,WACb,OACEC,YAAA,OAAKC,IAAKP,GACRM,YAAA,OAAKC,IAAKJ,GACRG,YAACE,IAAU,OAEbF,YAACG,IAAS,CACRC,YAAY,eACZH,IAAKH,EACLO,WAAY,CAAE,aAAc,cChCpC,IAAMC,EAAS,CAAAX,KAAA,SAAAC,OAAA,gQAkGAW,EA3DO,WACpB,IAAQC,EAAaC,cAAbD,SAqBR,OACER,YAAA,OAAKC,IAAKK,GACRN,YAACU,IAAM,CAACC,SAAS,UACfX,YAACY,IAAO,KACNZ,YAAA,WACEA,YAAA,UACEA,YAAA,MAAIa,UAAwB,MAAbL,EAAmB,SAAW,IAC3CR,YAACc,IAAI,CAACC,GAAG,KAAI,SAEff,YAAA,MAAIa,UAAwB,cAAbL,EAA2B,SAAW,IACnDR,YAACc,IAAI,CAACC,GAAG,aAAY,cAEvBf,YAAA,MAAIa,UAAwB,kBAAbL,EAA+B,SAAW,IACvDR,YAACc,IAAI,CAACC,GAAG,iBAAgB,oBAI/Bf,YAACD,EAAM,UCrEFiB,EAfE,WACf,IAAAC,EAA8BC,oBAAS,GAAMC,EAAAC,YAAAH,EAAA,GAAtCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAM1B,OACEnB,YAAA,YACIqB,GAAWrB,YAACuB,IAAM,CAACC,QANF,WACrBF,GAAW,KAKqCtB,YAAA,QAAMyB,eAAa,GAAM,KAAQ,YAC9EJ,GAAWrB,YAAA,WAAK,yBCNvB,IAAM0B,EAAQ,CAAA/B,KAAA,SAAAC,OAAA,iDA+BC+B,EAzBH,WACV,OACEC,IAAAC,cAAA,WACED,IAAAC,cAACC,IAAM,KACLF,IAAAC,cAACtB,EAAM,MACPqB,IAAAC,cAAA,QAAMhB,UAAU,OACde,IAAAC,cAACE,IAAK,CAACC,UAAW,EAAG/B,IAAKyB,GACxBE,IAAAC,cAACI,IAAM,KACLL,IAAAC,cAACK,IAAK,CAACC,KAAK,KACVP,IAAAC,cAACb,EAAQ,OAEXY,IAAAC,cAACK,IAAK,CAACC,KAAK,aACVP,IAAAC,cAAA,WAAK,4CAEPD,IAAAC,cAACK,IAAK,CAACC,KAAK,iBACVP,IAAAC,cAAA,WAAK,yCClBDO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACPd,IAAAC,cAACD,IAAMe,WAAU,KACff,IAAAC,cAACF,EAAG,OAENiB,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f7b90862.chunk.js","sourcesContent":["/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport InputBase from '@material-ui/core/InputBase'\nimport SearchIcon from '@material-ui/icons/Search'\n\nconst searchCss = css`\n  position: relative;\n  border-radius: 3px;\n  background-color: white;\n  &:hover: {\n    background-color: fade(#eee, 0.25);\n  }\n  width: 40%;\n`\n\nconst searchIconCss = css`\n  padding: 5px;\n  height: 100%;\n  position: absolute;\n  pointer-events: none;\n  display: flex;\n  align-items; center;\n  justify-content: center;\n  color: #6D6875;\n`\n\nconst inputCss = css`\n  padding: 1px;\n  padding-left: 30px;\n  width: 100%;\n\n`\n\nconst Search = () => {\n  return (\n    <div css={searchCss}>\n      <div css={searchIconCss}>\n        <SearchIcon />\n      </div>\n      <InputBase\n        placeholder=\"Searchâ€¦\"\n        css={inputCss}\n        inputProps={{ 'aria-label': 'search' }}\n      />\n    </div>\n  )\n}\n\nexport default Search\n","\n/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport css from '@emotion/css/macro'\nimport { BrowserRouter as Router, Link, useLocation } from 'react-router-dom'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport { Search } from '../shared'\n\nconst headerCss = css`\n  width: 100%;\n\n  header {\n    background-color: #E5989B;\n  }\n\n  ul {\n    list-style: none;\n    padding-right: 20px;\n  }\n\n  li {\n    display: inline-block;\n    padding: 10px 20px;\n\n    &.active,\n    &:hover {\n      background-color: #ffb4a2;\n      border-radius: 3px;\n      cursor: pointer;\n\n      a {\n        color: black;\n      }\n    }\n\n    a {\n      color: #333;\n      text-decoration: none;\n    }\n  }\n`\n\n// type HeaderProps = {\n//   path: string\n// }\n\n// TODO mobile vs desktop view\nexport const Header = () => {\n  const { pathname } = useLocation()\n\n  // return (\n  //   <div css={headerCss}>\n  //     <AppBar position=\"static\">\n  //       <Toolbar>\n  //         <Tabs aria-label=\"tabs router example\" value={window.location.pathname}>\n  //   +       <Tab label=\"Inbox\" value=\"/\">\n  //             <Link to=\"/\">Home</Link>\n  //           </Tab>\n  //   +       <Tab label=\"Drafts\" value=\"/wishlist\">\n  //             <Link to=\"/wishlist\">Wish List</Link>\n  //           </Tab>\n  //   +       <Tab label=\"Trash\" value=\"/shoppinglist\" />\n  //   +      </Tabs>\n  //         <Search />\n  //       </Toolbar>\n  //     </AppBar>\n  //   </div>\n  // )\n\n  return (\n    <div css={headerCss}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <nav>\n            <ul>\n              <li className={pathname === '/' ? 'active' : ''}>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li className={pathname === '/wishlist' ? 'active' : ''}>\n                <Link to=\"/wishlist\">Wish List</Link>\n              </li>\n              <li className={pathname === '/shoppingList' ? 'active' : ''}>\n                <Link to=\"/shoppingList\">Shopping List</Link>\n              </li>\n            </ul>\n          </nav>\n          <Search />\n        </Toolbar>\n      </AppBar>\n    </div>\n  )\n\n\n}\n\n{/* <IconButton\nedge=\"end\"\naria-label=\"account of current user\"\naria-controls={menuId}\naria-haspopup=\"true\"\nonClick={handleProfileMenuOpen}\ncolor=\"inherit\"\n>\n<AccountCircle />\n</IconButton> */}\n\nexport default Header\n","/** @jsx jsx */\nimport { jsx } from '@emotion/core'\nimport { useState } from 'react'\nimport Button from '@material-ui/core/MenuItem'\n\nconst ItemHome = () => {\n  const [showAdd, setShowAdd] = useState(false)\n\n  const handleAddClick = () => {\n    setShowAdd(true)\n  }\n\n  return (\n    <div>\n      {!showAdd && <Button onClick={handleAddClick}><span aria-hidden={true}>+</span>Add Item</Button>}\n      {showAdd && <div>Show Add Stuff Here</div>}\n    </div>\n  )\n}\n\nexport default ItemHome\n","import React from 'react'\nimport css from '@emotion/css/macro'\nimport './App.css'\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom'\nimport Paper from '@material-ui/core/Paper'\n\nimport Header from '../src/components/layout/Header'\nimport ItemHome from '../src/components/items/ItemHome'\n\nconst paperCss = css`\n  width: 90%;\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst App = () => {\n  return (\n    <div>\n      <Router>\n        <Header />\n        <main className=\"App\">\n          <Paper elevation={3} css={paperCss}>\n            <Switch>\n              <Route path=\"/\">\n                <ItemHome />\n              </Route>\n              <Route path=\"/wishlist\">\n                <div>Here will be dragaons aka the wish list</div>\n              </Route>\n              <Route path=\"/shoppinglist\">\n                <div>This will be the shopping list</div>\n              </Route>\n            </Switch>\n          </Paper>\n        </main>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}